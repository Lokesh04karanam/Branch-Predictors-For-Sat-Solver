#include <ooo_cpu.h>
#include "tage.h"
#include "loop_pred.h"

Tage tage_predictor[NUM_CPUS];                      // X component => Tage predictor component for each cpu 
Loop_Predictor loop_predictor[NUM_CPUS];                  // Y component => Loop predictor component for each cpu

uint8_t tage_pred[NUM_CPUS], loop_pred[NUM_CPUS];   // The prediction values of tage and loop predictor
int loop_correct[NUM_CPUS] = {0};                   // A counter value initialised to 0 which is used to decide whose prediction to use

// Update function for the counter value based on taken or not-taken
void ctr_update(uint8_t taken, uint32_t cpu) {
    if ((taken == loop_pred[cpu])&&(loop_correct[cpu] < 127)) {
        loop_correct[cpu]++;
    }
    else if(loop_correct[cpu] > -126){
        loop_correct[cpu]--;
    }
}

// Initialisation for both the predictors
void O3_CPU::initialize_branch_predictor(){
    loop_predictor[cpu].init();
    tage_predictor[cpu].initialization();
}

// Function which predicts whether branch will be taken or not taken
uint8_t O3_CPU::predict_branch(uint64_t ip){
    loop_pred[cpu] = loop_predictor[cpu].get_pred(ip);
    tage_pred[cpu] = tage_predictor[cpu].predict(ip);
    if ((loop_predictor[cpu].is_valid) && (loop_correct[cpu] >= 0)){  // First Priority is given to loop predictor
        return loop_pred[cpu];
    }
    else{
        return tage_pred[cpu];  // If loop predictor could not predict correctly , then prediction value given by tage predictor will be considered
    }
}

// Updates the predictor values based on the latest branch result
void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken){
    tage_predictor[cpu].update(ip, taken);
    loop_predictor[cpu].update_Loop_Entry(taken, tage_pred[cpu]);
    if (loop_predictor[cpu].is_valid && (tage_pred[cpu] != loop_pred[cpu])) {
        ctr_update(taken, cpu);
    }
}